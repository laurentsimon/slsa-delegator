"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getKeys = void 0;
/*
Copyright 2022 The Sigstore Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const crypto_1 = require("crypto");
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const util_1 = require("../util");
// Returns the set of trusted log keys which can be used to verify the
// Signed Entry Timestamps in the log.
function getKeys() {
    // TODO: This should be be loaded via TUF
    const pem = fs_1.default.readFileSync(path_1.default.resolve(__dirname, '../../store/rekor.pub'), 'utf-8');
    const key = (0, crypto_1.createPublicKey)(pem);
    // Calculate logID from the key
    const logID = getLogID(key);
    const keys = {
        [logID]: key,
    };
    return keys;
}
exports.getKeys = getKeys;
// Returns the hex-encoded SHA-256 hash of the public key.
function getLogID(key) {
    const der = key.export({ format: 'der', type: 'spki' });
    return util_1.crypto.hash(der).toString('hex');
}
