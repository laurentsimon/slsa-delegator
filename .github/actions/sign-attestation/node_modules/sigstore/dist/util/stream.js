"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ByteStream = exports.StreamError = void 0;
class StreamError extends Error {
}
exports.StreamError = StreamError;
class ByteStream {
    constructor(buf, pos = 0) {
        this.buf = buf;
        this.pos = pos;
    }
    // Returns the current stream position
    get position() {
        return this.pos;
    }
    // Returns the number of bytes in the stream
    get length() {
        return this.buf.length;
    }
    // Resets the stream to the given postion
    seek(pos) {
        this.pos = pos;
    }
    // Returns the next byte in the stream
    get() {
        const pos = this.pos++;
        if (pos >= this.length) {
            throw new StreamError('request past end of buffer');
        }
        return this.buf[pos];
    }
    // Returns a Buffer containing the specified number of bytes starting at the
    // given start position.
    slice(start, len) {
        const end = start + len;
        if (end > this.length) {
            throw new StreamError('request past end of buffer');
        }
        return this.buf.subarray(start, end);
    }
}
exports.ByteStream = ByteStream;
