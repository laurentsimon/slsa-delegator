"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseCertificate = void 0;
const net_1 = __importDefault(require("net"));
const tls_1 = __importDefault(require("tls"));
const pem_1 = require("./pem");
// Returns the parsed form of an X.509 certificate. Until we have a better
// solution, this is a very simple implementation that only parses the
// serial number and validity period. We're taking advantage of the
// fact that the TLSSocket class exposes a getPeerCertificate() method which
// returns basic information about its associated certificate.
function parseCertificate(cert) {
    const pem = typeof cert === 'string' ? cert : (0, pem_1.fromDER)(cert);
    const secureContext = tls_1.default.createSecureContext({ cert: pem });
    const secureSocket = new tls_1.default.TLSSocket(new net_1.default.Socket(), { secureContext });
    const certFields = secureSocket.getCertificate();
    secureSocket.destroy();
    return {
        serialNumber: certFields.serialNumber,
        validFrom: new Date(certFields.valid_from),
        validTo: new Date(certFields.valid_to),
    };
}
exports.parseCertificate = parseCertificate;
