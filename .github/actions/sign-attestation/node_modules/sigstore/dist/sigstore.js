"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.verify = exports.signAttestation = exports.sign = exports.DEFAULT_REKOR_BASE_URL = exports.utils = void 0;
/*
Copyright 2022 The Sigstore Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
const client_1 = require("./client");
const identity_1 = __importDefault(require("./identity"));
const sign_1 = require("./sign");
const tlog_1 = require("./tlog");
const keys_1 = require("./tlog/keys");
const bundle_1 = require("./types/bundle");
const verify_1 = require("./verify");
exports.utils = __importStar(require("./sigstore-utils"));
exports.DEFAULT_REKOR_BASE_URL = 'https://rekor.sigstore.dev';
function createTLogClient(options) {
    return new tlog_1.TLogClient({
        rekorBaseURL: options.rekorBaseURL || exports.DEFAULT_REKOR_BASE_URL,
    });
}
async function sign(payload, options = {}) {
    const fulcio = new client_1.Fulcio({ baseURL: options.fulcioBaseURL });
    const tlog = createTLogClient(options);
    const idps = configureIdentityProviders(options);
    const signer = new sign_1.Signer({
        fulcio,
        tlog,
        identityProviders: idps,
    });
    const bundle = await signer.signBlob(payload);
    return (0, bundle_1.bundleToJSON)(bundle);
}
exports.sign = sign;
async function signAttestation(payload, payloadType, options = {}) {
    const fulcio = new client_1.Fulcio({ baseURL: options.fulcioBaseURL });
    const tlog = createTLogClient(options);
    const idps = configureIdentityProviders(options);
    const signer = new sign_1.Signer({
        fulcio,
        tlog,
        identityProviders: idps,
    });
    const bundle = await signer.signAttestation(payload, payloadType);
    return (0, bundle_1.bundleToJSON)(bundle);
}
exports.signAttestation = signAttestation;
async function verify(bundle, data, options = {}) {
    const tlog = createTLogClient(options);
    const tlogKeys = (0, keys_1.getKeys)();
    const verifier = new verify_1.Verifier({
        tlog,
        tlogKeys,
        getPublicKey: options.getPublicKey,
    });
    const b = (0, bundle_1.bundleFromJSON)(bundle);
    return verifier.verifyOffline(b, data);
}
exports.verify = verify;
// Translates the IdenityProviderOptions into a list of Providers which
// should be queried to retrieve an identity token.
function configureIdentityProviders(options) {
    const idps = [];
    const token = options.identityToken;
    // If an explicit identity token is provided, use that. Setup a dummy
    // provider that just returns the token. Otherwise, setup the CI context
    // provider and (optionally) the OAuth provider.
    if (token) {
        idps.push({ getToken: () => Promise.resolve(token) });
    }
    else {
        idps.push(identity_1.default.ciContextProvider());
        if (options.oidcIssuer && options.oidcClientID) {
            idps.push(identity_1.default.oauthProvider(options.oidcIssuer, options.oidcClientID, options.oidcClientSecret));
        }
    }
    return idps;
}
