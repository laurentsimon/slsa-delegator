# Copyright 2022 SLSA Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: SLSA builder delegator

permissions:
  contents: read

defaults:
  run:
    shell: bash

env:
  SLSA_OUTPUTS_DIR: __SLSA_OUTPUTS_DIR__
  SLSA_ARTIFACTS_FILE: artifacts.json

on:
  workflow_call:
    secrets:
      secrets:
        description: >
          Optional secret, seperated by a space.

          This argument is passed, unchanged, to the builder's Action's `build-artifacts`.
        required: false
    inputs:
      slsa-token:
        description: "The SLSA token identifying the request"
        required: true
        type: string
    outputs:
      build-artifacts-outputs:
        description: "The outputs from the build-artitacts Action, unchanged."
        value: ${{ jobs.build-artifacts-ubuntu.outputs.outputs }}
      attestations-download-name:
        description: "Name of the artifact to download all the attestations."
        value: ${{ jobs.generate-provenance.outputs.attestations-download-name }}

jobs:
  # privacy-check verifies that the user has agreed for their repository name to be made public, via the rekor log.
  # privacy-check:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Check private repos
  #       uses: slsa-framework/slsa-github-generator/.github/actions/privacy-check@main
  #       with:
  #         error_message: "Repository is private. The workflow has halted in order to keep the repository name from being exposed in the public transparency log. Set 'private-repository' to override."
  #         override: ${{ inputs.allow-private-repository }}

  # detect-env detects the reusable workflow's repository and ref for use later
  # in the workflow.
  detect-env:
    outputs:
      repository: ${{ steps.detect.outputs.repository }}
      ref: ${{ steps.detect.outputs.ref }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write # Needed to detect the current reusable repository and ref.
    steps:
      - name: Detect the generator ref
        id: detect
        run: |
          echo "URL: $ACTIONS_ID_TOKEN_REQUEST_URL"
          echo "repository=laurentsimon/slsa-delegator" >> "$GITHUB_OUTPUT" 
          echo "ref=main" >> "$GITHUB_OUTPUT" 
        #uses: slsa-framework/slsa-github-generator/.github/actions/detect-workflow@main

  # validate-token validate the slsa token.
  validate-token:
    outputs:
      slsa-token: ${{ steps.validate.outputs.slsa-validated-token }}
      tool-repository: ${{ steps.validate.outputs.tool-repository }}
      tool-ref: ${{ steps.validate.outputs.tool-ref }}
      tool-uri: ${{ steps.validate.outputs.tool-uri }}
    runs-on: ubuntu-latest
    needs: [detect-env]
    steps:
      # TODO: use a secure builder checkout.
      - name: Checkout the builder
        # This pin must be added to the release freezze reference pre-submits.
        uses: laurentsimon/slsa-delegator/.github/actions/secure-checkout@main
        with:
          repository: ${{ needs.detect-env.outputs.repository }}
          ref: ${{ needs.detect-env.outputs.ref }}

      - name: Validate the token
        id: validate
        uses: ./__BUILDER_CHECKOUT_DIR__/.github/actions/validate-token
        with:
          slsa-workflow-recipient: "delegator_generic_slsa3.yml"
          slsa-token: ${{ inputs.slsa-token }}

  # build-artifacts-ubuntu builds the projects.
  build-artifacts-ubuntu:
    if: fromJson(needs.validate-token.outputs.slsa-token).builder.runner-label == 'ubuntu-latest'
    outputs:
      outputs: ${{ toJson(steps.build-artifacts-action.outputs) }}
      outputs-filename-sha256: ${{ steps.upload.outputs.outputs-filename-sha256 }}
    runs-on: ubuntu-latest
    # TODO: privacy-check, detect-env
    needs: [detect-env, validate-token]
    permissions:
      # TODO: we should avoid these permissions for build systems that 'run' dependency codes
      # during 'compilation': e.g., npm's install scripts.
      contents: write # For release assets.
      packages: write # For publishing to GitHub packages.
    steps:
      - name: debug
        env:
          TOKEN: ${{ toJson(needs.validate-token.outputs.slsa-token) }}
          RUNNER: ${{ fromJson(needs.validate-token.outputs.slsa-token).builder.runner-label }}
        run: |
          echo "$TOKEN: $TOKEN"
          echo "$RUNNER: $RUNNER"
      - name: Checkout the builder
        # TODO: use a secure builder checkout.
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # tag=v3.1.0
        with:
          fetch-depth: 1
          persist-credentials: false
          repository: ${{ needs.detect-env.outputs.repository }}
          ref: ${{ needs.detect-env.outputs.ref }}
          path: __BUILDER_CHECKOUT_DIR__
      - run: mv __BUILDER_CHECKOUT_DIR__ ../__BUILDER_CHECKOUT_DIR__

      # TODO: when updating folder's name: keep in mind that npm's typescript compiler complains if the names are too long: workspace/__BUILDER_CHECKOUT_DIR__
      - name: Checkout the tool
        # TODO: use a secure tool checkout.
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # tag=v3.1.0
        with:
          fetch-depth: 1
          persist-credentials: false
          repository: ${{ needs.validate-token.outputs.tool-repository }}
          ref: ${{ needs.validate-token.outputs.tool-ref }}
          path: __TOOL_CHECKOUT_DIR__
      - run: mv __TOOL_CHECKOUT_DIR__ ../__TOOL_CHECKOUT_DIR__

      # TODO: This should be part of the tool checkout Action.
      - name: Link the Action / create output folder
        env:
          ACTION_PATH: ${{ fromJson(needs.validate-token.outputs.slsa-token).tool.actions.build-artifacts.path }}
        run: |
          set -euo pipefail
         
          echo "ACTION_PATH=$ACTION_PATH"
          mkdir -p ../__TOOL_ACTION_DIR__
          echo ../__TOOL_CHECKOUT_DIR__/"$ACTION_PATH"/
          tree ../__TOOL_CHECKOUT_DIR__
          mv ../__TOOL_CHECKOUT_DIR__/"$ACTION_PATH"/* ../__TOOL_ACTION_DIR__/
          ls ../__TOOL_ACTION_DIR__/

          echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
          echo "SLSA_OUTPUTS_DIR: ../$SLSA_OUTPUTS_DIR"
          mkdir "../$SLSA_OUTPUTS_DIR"

          ls -l ../
          ls -l

      # TODO: use secure checkout
      - name: Checkout the project repository
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # tag=v3.1.0
        with:
          fetch-depth: 1
          persist-credentials: false
          #path: __PROJECT_CHECKOUT_DIR__

      # TODO: https://goreleaser.com/errors/dirty/
      # - name: Move the project repository
      #   env:
      #     REPOSITORY_NAME: ${{ github.event.repository.name }}
      #   run: |
      #     set -euo pipefail

      #     ls __PROJECT_CHECKOUT_DIR__/
      #     mv __PROJECT_CHECKOUT_DIR__/{.[!.],}* .

      # - name: Test
      #   # env:
      #   #   ACTION_DIR: __TOOL_ACTION_DIR__/build-artifacts
      #   env:
      #     SLSA_TOKEN: ${{ toJson(needs.validate-token.outputs.slsa-token) }}
      #     INPUTS: ${{ toJson(fromJson(needs.validate-token.outputs.slsa-token).tool.inputs) }}
      #   run: |
      #     echo "GITHUB_WORKSPACE=$GITHUB_WORKSPACE/__PROJECT_CHECKOUT_DIR__" >> $GITHUB_ENV
      #     echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
      #     ls -l
      #     ls ../__TOOL_ACTION_DIR__/

      #     echo "slsa-token: $SLSA_TOKEN"
      #     echo "inputs: $INPUTS"

      - name: Build artifacts
        id: build-artifacts-action
        env:
          # Note: JSON-formatted field need to use toJson().
          SLSA_TOOL_INPUTS: ${{ toJson(fromJson(needs.validate-token.outputs.slsa-token).tool.inputs) }}
          SLSA_SECRETS: ${{ secrets.secrets }}
        uses: ./../__TOOL_ACTION_DIR__
        with:
          # TODO: move other inputs as arguments.
          workflow-inputs: ${{ toJson(fromJson(needs.validate-token.outputs.slsa-token).tool.inputs) }}
          # workflow-secrets: ${{ secrets.secrets }}
          # TODO: if saved in file, this implies the Action is *not* a docker-based Action.
          slsa-outputs-file: ${{ github.workspace }}/../${{ env.SLSA_OUTPUTS_DIR }}/${{ env.SLSA_ARTIFACTS_FILE }}

      - run: mv ../${{ env.SLSA_OUTPUTS_DIR }} ${{ env.SLSA_OUTPUTS_DIR }}

      # TODO: Use the secure upload
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ env.SLSA_ARTIFACTS_FILE }}-XXXX
          path: ${{ env.SLSA_OUTPUTS_DIR }}/${{ env.SLSA_ARTIFACTS_FILE }}
      - name: Upload securely the result
        id: upload
        run: |
          echo "outputs-filename-sha256=abcdefg" >> "$GITHUB_OUTPUT"
          # XXX indicates a random value, to ensure we don't collide with other workflow runs.

  # generate-provenance generates and signs the provenance.
  generate-provenance:
    needs: [validate-token, build-artifacts-ubuntu]
    outputs:
      attestations-download-name: "slsa-attestations-XXXX"
    runs-on: ubuntu-latest
    steps:
      # TODO: secure download using ${{ needs.build-artifacts-ubuntu.outputs.outputs-filename-sha256 }}
      - uses: actions/download-artifact@v3
        with:
          name: ${{ env.SLSA_ARTIFACTS_FILE }}-XXXX

      - name: Generate attestations
        id: sign
        uses: laurentsimon/slsa-delegator/.github/actions/internal/generate-attestations@main
        with:
          slsa-outputs-file: ${{ env.SLSA_ARTIFACTS_FILE }}
          tool-inputs: ${{ toJson(fromJson(needs.validate-token.outputs.slsa-token).tool.inputs) }}
          tool-uri: ${{ needs.validate-token.outputs.tool-uri }}
          tool-path: ${{ fromJson(needs.validate-token.outputs.slsa-token).tool.actions.build-artifacts.path }}

      - name: Generate and sign
        id: generate-sign
        env:
          SLSA_TOOL_INPUTS: ${{ toJson(fromJson(needs.validate-token.outputs.slsa-token).tool.inputs) }}
          BUILD_ARTIFACTS_OUTPUTS: ${{ needs.build-artifacts-ubuntu.outputs.outputs }}
          BUILD_ARTIFACTS_OUTPUTS_FILE: ${{ env.SLSA_ARTIFACTS_FILE }}
          BUILD_ARTIFACTS_OUTPUTS_FILE_SHA256: ${{ needs.build-artifacts-ubuntu.outputs.outputs-filename-sha256 }}
        run: |
          echo "SLSA_TOOL_INPUTS: $SLSA_TOOL_INPUTS"
          echo "BUILD_ARTIFACTS_OUTPUTS: $BUILD_ARTIFACTS_OUTPUTS"
          echo "BUILD_ARTIFACTS_OUTPUTS_FILE: $BUILD_ARTIFACTS_OUTPUTS_FILE"
          echo "BUILD_ARTIFACTS_OUTPUTS_FILE_SHA256: $BUILD_ARTIFACTS_OUTPUTS_FILE_SHA256"

          tree

          cat "$BUILD_ARTIFACTS_OUTPUTS_FILE"

          echo "generated and signed"
          #TODO: add the Action path


  